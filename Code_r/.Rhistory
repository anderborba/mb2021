mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- matrix(0, 1, n_mu)
eixo_si <- matrix(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
#    #mesh_log_like[i, j] <- loglik(c(eixo_mu, eixo_si))
mesh_log_like[i, j] <- 1
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
eixo_mu
eixo_si
mesh_log_like
mesh_log_like[1,1]
n_mu <- 100
n_si <- 100
mu_i <- 0
mu_f <- 10
si_i <- 0
si_f <- 10
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- matrix(0, 1, n_mu)
eixo_si <- matrix(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
#    #mesh_log_like[i, j] <- loglik(c(eixo_mu, eixo_si))
mesh_log_like[i, j] <- 1
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
eixo_mu
rep(0, 5)
rep(0, 30)
n_mu <- 100
n_si <- 100
mu_i <- 0
mu_f <- 10
si_i <- 0
si_f <- 10
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
#    #mesh_log_like[i, j] <- loglik(c(eixo_mu, eixo_si))
mesh_log_like[i, j] <- 1
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
n_mu <- 100
n_si <- 100
mu_i <- 1
mu_f <- 10
si_i <- 1
si_f <- 10
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
#    #mesh_log_like[i, j] <- loglik(c(eixo_mu, eixo_si))
mesh_log_like[i, j] <- 1
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
n_mu <- 100
n_si <- 100
mu_i <- 1
mu_f <- 10
si_i <- 1
si_f <- 10
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
mesh_log_like[i, j] <- loglik(c(eixo_mu[i], eixo_si[j]))
#mesh_log_like[i, j] <- 1
}
}
n <- nrow(CO2)
z <- CO2$uptake
loglik <- function(theta) {
mu <- theta[1]
sigma <- theta[2]
loglik <- -n*log(sqrt(2*pi)) - n*log(sigma) - 0.5*sum((z - mu)^2/sigma^2)
}
n_mu <- 100
n_si <- 100
mu_i <- 1
mu_f <- 10
si_i <- 1
si_f <- 10
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
mesh_log_like[i, j] <- loglik(c(eixo_mu[i], eixo_si[j]))
#mesh_log_like[i, j] <- 1
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
n_mu <- 100
n_si <- 100
mu_i <- 1
mu_f <- 30
si_i <- 1
si_f <- 40
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
mesh_log_like[i, j] <- loglik(c(eixo_mu[i], eixo_si[j]))
#mesh_log_like[i, j] <- 1
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
res <- maxLik(loglik, start=c(mu=30, sigma=10), method = "BFGS")
res1 <- maxBFGS(loglik, start=c(mu=30, sigma=10))
pt  <- res$estimate
pt1 <- res1$estimate
pt
pt1
res
res1
unlink('OptimizationTwoParametersGaussianDistribution_cache', recursive = TRUE)
install.packages("webshot")
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
theme_set(theme_pander())
require(reshape2)
rm(list = ls())
require(maxLik)
library(plotly)
library(datasets)
#### webshot function
#webshot::install_phantomjs()
data(CO2)
set.seed(1234567890, kind="Mersenne-Twister")
n_mu <- 100
n_si <- 100
mu_i <- 1
mu_f <- 30
si_i <- 1
si_f <- 40
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
mesh_log_like[i, j] <- loglik(c(eixo_mu[i], eixo_si[j]))
#mesh_log_like[i, j] <- 1
}
}
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
theme_set(theme_pander())
require(reshape2)
rm(list = ls())
require(maxLik)
library(plotly)
library(datasets)
#### webshot function
#webshot::install_phantomjs()
data(CO2)
set.seed(1234567890, kind="Mersenne-Twister")
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
theme_set(theme_pander())
require(reshape2)
rm(list = ls())
require(maxLik)
library(plotly)
library(datasets)
#### webshot function
#webshot::install_phantomjs()
data(CO2)
set.seed(1234567890, kind="Mersenne-Twister")
n <- nrow(CO2)
z <- CO2$uptake
loglik <- function(theta) {
mu <- theta[1]
sigma <- theta[2]
loglik <- -n*log(sqrt(2*pi)) - n*log(sigma) - 0.5*sum((z - mu)^2/sigma^2)
}
n <- nrow(CO2)
z <- CO2$uptake
loglik <- function(theta) {
mu <- theta[1]
sigma <- theta[2]
loglik <- -n*log(sqrt(2*pi)) - n*log(sigma) - 0.5*sum((z - mu)^2/sigma^2)
}
n_mu <- 100
n_si <- 100
mu_i <- 1
mu_f <- 30
si_i <- 1
si_f <- 40
h_mu <- (mu_f - mu_i) / ( n_mu - 1)
h_si <- (si_f - si_i) / ( n_si - 1)
ne   <- n_mu * n_si
mesh_log_like <- matrix(0, n_mu, n_si)
eixo_mu <- rep(0,n_mu)
eixo_si <- rep(0, 1, n_si)
for (i in 1 : n_mu){
eixo_mu[i] <- mu_i + (i - 1) * h_mu
for (j in 1 : n_si){
eixo_si[j] <- si_i + (j - 1) * h_si
mesh_log_like[i, j] <- loglik(c(eixo_mu[i], eixo_si[j]))
}
}
p <- plot_ly(x = eixo_mu, y = eixo_si, z = mesh_log_like , type = "surface")
p
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
theme_set(theme_pander())
require(reshape2)
set.seed(1234567890, kind="Mersenne-Twister")
SH <- rep(0, 100)
for(el in 5:95) {
lambda1 <- Estim[2,el]
lambda2 <- Estim[3,el]
SH[el] <- 0.08 * el * (100-el) * (1- 2*sqrt(lambda1*lambda2)/(lambda1+lambda2) )
}
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
theme_set(theme_pander())
require(reshape2)
set.seed(1234567890, kind="Mersenne-Twister")
lambda1 <- 1
lambda2 <- 10
z <- c(rexp(50, rate=1/lambda1), rexp(50, 1/lambda2))
ggplot(data.frame(z), aes(x=1:100, y=z)) +
geom_line() +
geom_vline(xintercept = 50, col="darkorange") +
xlab("Position")
Estim <- matrix(data=rep(0, 300), nrow=3, ncol=100)
Estim[1,] <- 1:100
for(el in 5:95) {
Estim[2, el] <- mean(z[1:el])
Estim[3, el] <- mean(z[(el+1):100])
}
Estim.df <- melt(data.frame(Position=Estim[1,], lambda1=Estim[2,], lambda2=Estim[3,]),
measure.vars = 2:3,
value.name = "Estimates")
ggplot(Estim.df, aes(x=Position, y=Estimates, group=variable, col=variable)) +
geom_line()
SH <- rep(0, 100)
for(el in 5:95) {
lambda1 <- Estim[2,el]
lambda2 <- Estim[3,el]
SH[el] <- 0.08 * el * (100-el) * (1- 2*sqrt(lambda1*lambda2)/(lambda1+lambda2) )
}
edge <- which.max(SH)
ggplot(data.frame(SH), aes(x=1:100, y=SH)) +
geom_line() +
xlab("Position") +
geom_hline(yintercept = qchisq(c(.9, .95, .99), df=1),
col="orange", linetype=2) +
geom_vline(xintercept = edge, col="red")
SH <- rep(0, 100)
for(el in 5:95) {
lambda1 <- Estim[2,el]
lambda2 <- Estim[3,el]
SH[el] <- 0.08 * el * (100-el) * (1- 2*sqrt(lambda1*lambda2)/(lambda1+lambda2) )
}
edge <- which.max(SH)
ggplot(data.frame(SH), aes(x=1:100, y=SH)) +
geom_line() +
xlab("Position") +
geom_hline(yintercept = qchisq(c(.9, .95, .99), df=1),
col="orange", linetype=2) +
geom_vline(xintercept = edge, col="red")
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
z
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
matdf1
matdf2
res1
matdf1
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
res
res
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
res
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
r1
r2
res
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
res
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
coef()
cf
source('~/github/mb2021/Code_r/maxlik_arq/maxLik_1.2-4/maxLik/R/valid_gaussiana_maxlik_borba.R')
getwd()
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
pt1
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1[10,1]
matdf1[10,2]
source('~/github/mb2021/Code_r/valid_maxlik_bmf_2021.r')
pt1
pt2
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
evidencias
matdf1
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1
k
j
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
r1
r2
r1
r2
z
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
sum(z[1: j]) / j
j
sum(z[1: 10]) / j
sum(z[1: 10]) / 10
matdf1
matdf1[10]
matdf1[10,]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1[10,]
matdf1[20,]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
matdf1
matdf1[20]
matdf1[20,]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1[25,]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1[20,]
r2
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
z
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matrix(data, nrow = rows, ncol = cols)
mat
mat[20,]
mat[19,]
mat[21,]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
getwd()
setwd("..")
getwd()
setwd("/home/aborba/github/mb2021/Code_r")
setwd("..")
setwd("/home/aborba/github/mb2021/Code_r")
getwd()
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
sum(z[(j + 1): N]) / (N - j)
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
matdf1
matdf1[20,:]
matdf1[20,]
matdf2[20,]
evidencias
evidencias[20]
evidencias[21]
evidencias[9]
evidencias[10]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
evidencias[1]
evidencias[2]
evidencias[3]
evidencias[25]
evidencias[26]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
evidencias[25]
matdf1
matdf1[1:4,]
matdf1[100:N,]
evidencias[25]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
z
z[49]
z[50]
z[1]
z[10]
z[20]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
z
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
evidencias
z
z[1]
source('~/github/mb2021/Code_r/evidencias_im_real_sa_param_mu_L.R')
z
evidencias
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
theme_set(theme_pander())
require(reshape2)
rm(list = ls())
require(maxLik)
library(plotly)
library(datasets)
#### webshot function
#webshot::install_phantomjs()
set.seed(123)
mleBFGS_grad <- maxBFGS(logLikFun, grad = logLikGrad, start = c(mu = 0, sigma = 1))
mleBFGS_grad <- maxBFGS(logLikFun, grad = logLikGrad, start = c(mu = 0, sigma = 1))
mleBFGS_grad <- maxBFGS(logLikFun, grad = logLikGrad, start = c(mu = 0, sigma = 1))
print("Inicio optim")
res1 <- optim(par = c(mu = 0, sigma = 1) , fn = logLikFun, grad = logLikGrad, method = "BFGS" )
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
citation("stats"):
q
citation("stats")
sum(z)/ N
